{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["observable$","interval","action$","Subject","subscribe","console","log","wait$","pipe","filter","action","App","useState","time","setTime","timerOn","setTimerOn","useEffect","subscription","prev","unsubscribe","counts","debounceTime","waitMode","buffer","map","clicks","length","clicksCount","className","Math","floor","slice","onClick","next","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAMMA,EAAcC,YAAS,KAEvBC,EAAU,IAAIC,IACpBD,EAAQE,UAAUC,QAAQC,KAC1B,IAAMC,EAAQL,EAAQM,KAAKC,aAAQ,SAAAC,GAAM,MAAe,SAAXA,MAgE9BC,MA7Df,WAEE,MAAyBC,mBAAU,GAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAAgCF,oBAAU,GAA1C,mBAAQG,EAAR,KAAiBC,EAAjB,KA+BA,OA7BAC,qBAAU,WACRZ,QAAQC,IAAI,aAAcO,KACzB,CAACA,IAEJI,qBAAU,WACR,IAAIC,EAAelB,EAClBI,WAAU,WACDW,GACFD,GAAQ,SAACK,GAAD,OAAUA,EAAO,QAGjC,OAAO,kBAAMD,EAAaE,iBACzB,CAACL,IAGJE,qBAAW,WACT,IAAMI,EAASd,EAAMC,KAAKc,YAAa,MAEjCC,EADWhB,EAAMC,KAAKgB,YAAOH,GAASI,aAAK,SAAAC,GAAM,OAAIA,EAAOC,UAASlB,aAAQ,SAAAmB,GAAW,OAAoB,IAAhBA,MACxExB,WAAU,WAClCY,GAAW,MAEb,OAAO,kBAAOO,EAASH,iBACtB,IAQD,qBAAKS,UAAU,YAAf,SACI,gCACI,sBAAKA,UAAU,eAAf,UACE,kCAAQ,IAAMC,KAAKC,MAAQlB,EAAO,KAAQ,KAAMmB,OAAO,GAAvD,QADF,OAEE,kCAAQ,IAAMF,KAAKC,MAAQlB,EAAO,GAAM,KAAMmB,OAAO,GAArD,QAFF,OAGE,gCAAQ,IAAMF,KAAKC,MAAQlB,EAAQ,KAAMmB,OAAO,QAElD,sBAAKH,UAAU,eAAf,WACKd,GACH,wBAAQc,UAAU,QAAQI,QAAS,kBAAMjB,GAAW,IAApD,mBAEED,GACF,wBAAQc,UAAU,OAAOI,QAlBf,WACpBjB,GAAW,GACXF,EAAQ,IAgBE,kBAEEC,GACF,wBAAQc,UAAU,OAAOI,QAAS,kBAAM/B,EAAQgC,KAAK,SAArD,kBAEErB,EAAO,GACT,wBAAQgB,UAAU,QAAQI,QAAS,kBAAInB,EAAQ,IAA/C,4BCtDCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f52a2786.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { interval, Subject, filter, map, debounceTime, buffer} from 'rxjs';\n\n\nconst observable$ = interval(1000);\n\nconst action$ = new Subject ();\naction$.subscribe(console.log)\nconst wait$ = action$.pipe(filter( action => action === \"wait\"));\n\n\nfunction App() {\n\n  const [ time, setTime] = useState (0);\n  const [ timerOn, setTimerOn ] = useState (false); \n\n  useEffect(() => {                   // для отладки\n    console.log('useEffect:', time);  \n  }, [time])  \n \n  useEffect(() => {\n    let subscription = observable$\n    .subscribe(() => {\n          if (timerOn) {\n            setTime((prev) => prev + 1)\n          };\n        });\n    return () => subscription.unsubscribe();\n  }, [timerOn]); \n\n\n  useEffect (() => {\n    const counts = wait$.pipe(debounceTime(300));\n    const clicked$ = wait$.pipe(buffer(counts), map( clicks => clicks.length), filter( clicksCount => clicksCount === 2));  \n    const waitMode = clicked$.subscribe(() => {\n      setTimerOn(false);\n    });    \n    return () =>  waitMode.unsubscribe();\n  }, []);\n\n  const onStopClicked = () => {\n    setTimerOn(false)\n    setTime(0)\n  }\n\n  return (\n    <div className=\"mainBlock\">\n        <div>\n            <div className=\"numbersBlock\">\n              <span>{(\"0\" + Math.floor(( time / 3600) % 60 )).slice(-2)} :</span>&nbsp;\n              <span>{(\"0\" + Math.floor(( time / 60) % 60 )).slice(-2)} :</span>&nbsp;\n              <span>{(\"0\" + Math.floor(( time) % 60 )).slice(-2)}</span>    \n            </div>     \n            <div className=\"buttonsBlock\">\n              { !timerOn && (\n              <button className=\"start\" onClick={() => setTimerOn(true)}>Start</button>\n              )}\n              { timerOn && (\n              <button className=\"stop\" onClick={onStopClicked}>Stop</button>\n              )}\n              { timerOn && (\n              <button className=\"wait\" onClick={() => action$.next(\"wait\")}>Wait</button>\n              )}   \n              { time > 0 && (\n              <button className=\"reset\" onClick={()=>setTime(0)}>Reset</button>\n              )}               \n            </div>    \n        </div>\n    </div>        \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}