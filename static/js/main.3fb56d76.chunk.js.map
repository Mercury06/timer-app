{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["observable$","interval","actionReset$","Subject","subscribe","console","log","App","useState","time","setTime","timerOn","setTimerOn","useEffect","subscription","pipe","startWith","switchMap","result","unsubscribe","className","Math","floor","slice","onClick","next","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAMMA,EAAcC,YAAS,KACvBC,EAAe,IAAIC,IACzBD,EAAaE,UAAUC,QAAQC,KAwDhBC,MArDf,WAEE,MAAyBC,mBAAU,GAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAAgCF,oBAAU,GAA1C,mBAAQG,EAAR,KAAiBC,EAAjB,KAuBA,OArBAC,qBAAU,WACRR,QAAQC,IAAI,aAAcG,KACzB,CAACA,IAEJI,qBAAU,WAER,IAAIC,EAAeZ,EAAaa,KAC9BC,YAAU,MACVC,aAAU,kBAAMjB,MAChBI,WAAU,SAAAc,GACVP,GAAWD,EAAQQ,MAGrB,OAAO,kBAAMJ,EAAaK,iBACzB,CAACR,IAQF,qBAAKS,UAAU,YAAf,SACI,gCACI,sBAAKA,UAAU,eAAf,UACE,kCAAQ,IAAMC,KAAKC,MAAQb,EAAO,KAAQ,KAAMc,OAAO,GAAvD,QADF,OAEE,kCAAQ,IAAMF,KAAKC,MAAQb,EAAO,GAAM,KAAMc,OAAO,GAArD,QAFF,OAGE,gCAAQ,IAAMF,KAAKC,MAAQb,EAAQ,KAAMc,OAAO,QAElD,sBAAKH,UAAU,eAAf,WACIT,GACF,wBAAQa,QAAS,kBAAMZ,GAAW,IAAlC,mBAEED,GACF,wBAAQa,QAlBA,WAClBZ,GAAW,GACXF,EAAQ,IAgBE,kBAEEC,GACF,wBAAQa,QAAS,kBAAMtB,EAAauB,MAAK,IAAzC,kBAEEhB,EAAO,GACT,wBAAQe,QAAS,kBAAMtB,EAAauB,KAAK,iBAAzC,4BC5CCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3fb56d76.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { interval, startWith, Subject, switchMap, timeout } from 'rxjs';\n\n\nconst observable$ = interval(1000);\nconst actionReset$ = new Subject ();\nactionReset$.subscribe(console.log)\n\n\nfunction App() {\n\n  const [ time, setTime] = useState (0);\n  const [ timerOn, setTimerOn ] = useState (false); \n\n  useEffect(() => {                   // для отладки\n    console.log('useEffect:', time);  \n  }, [time])\n\n  useEffect(() => {\n          \n    let subscription = actionReset$.pipe(\n      startWith(null),\n      switchMap(() => observable$),\n    ).subscribe(result =>{\n      timerOn && setTime(result);\n      } \n    );\n    return () => subscription.unsubscribe();\n  }, [timerOn]);\n\n  const onStopClick = () => {\n    setTimerOn(false)\n    setTime(0)\n  }\n\n  return (\n    <div className=\"mainBlock\">\n        <div>\n            <div className=\"numbersBlock\">\n              <span>{(\"0\" + Math.floor(( time / 3600) % 60 )).slice(-2)} :</span>&nbsp;\n              <span>{(\"0\" + Math.floor(( time / 60) % 60 )).slice(-2)} :</span>&nbsp;\n              <span>{(\"0\" + Math.floor(( time) % 60 )).slice(-2)}</span>    \n            </div>     \n            <div className=\"buttonsBlock\">\n              {!timerOn && (\n              <button onClick={() => setTimerOn(true)}>Start</button>\n              )}\n              { timerOn && (\n              <button onClick={onStopClick}>Stop</button>\n              )}\n              { timerOn && (\n              <button onClick={() => actionReset$.next(true)}>Wait</button>\n              )}   \n              { time > 0 && (\n              <button onClick={() => actionReset$.next('clickedreset')}>Reset</button>\n              )}   \n            </div>    \n        </div>\n    </div>        \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}